// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.
function problem1() {
  const answerP = document.querySelector("#problem1Answer");
  let sum = 0;
  for(let i = 0; i < 1000; i++) {
    if ((i%3===0) || (i%5===0)){
      sum += i;
    }
  }
  answerP.innerHTML = "Answer: " + sum;
}

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
function problem2() {
  console.log(findFibUpTo(4000000));
}

function findFibUpTo(num) {
  let prev1 = 1;
  let prev2 = 1;
  let latest= 2;
  let total = 0;
  while(latest<num) {
    latest = prev1 + prev2;
    if(latest%2==0) {
      total += latest;
    }
    prev2 = prev1;
    prev1 = latest;
  }
  return total;
}

// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?
function problem3(num) {
  let i = 2
  while (num > 1) {
    console.log(num);
    if (num % i == 0) {
      num /= i;
      i -=1
    } 
    i +=1;
  }
  return i;
}

// A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
// Find the largest palindrome made from the product of two 3-digit numbers.
function problem4(){
  let largest = 0;
  let x = 999;
  let y = 999;
  for(x; x>0; x--) {
    for (y; y>0; y--) {
      mult = x*y;
      if (checkPali(mult)) {
        if (mult > largest) {
          largest = mult;
        }
        break;
      }
    }
    y = 999;
  }
  return largest;
}

function checkPali(num) {
  let tempNum = Array.from(num.toString()).map(Number);
  for(let i = 0; i < tempNum.length/2; i++) {
    if (tempNum[i] !== tempNum[tempNum.length-i-1]) return false;
  }
  return true;
}

// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
function problem5(startNum, endNum) {
  let smallestDiv = (endNum * (endNum-1)) / gcd(endNum, endNum-1);
  for(endNum; endNum > startNum; endNum--) {
    smallestDiv = (smallestDiv * (endNum-1)) / gcd(smallestDiv, endNum-1);
  }
  console.log(smallestDiv);
}

function gcd(num1, num2) {
  while(num1 !== num2){
    if (num1 > num2) {
      num1 -= num2
    } else {
      num2 -= num1;
    }
  }
  return num1;
}



// The sum of the squares of the first ten natural numbers is,
// 1^2 + 2^2 + ... + 10^2 = 385
// The square of the sum of the first ten natural numbers is,
// (1 + 2 + ... + 10)^2 = 552 = 3025
// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
function problem6(num) {
  let sumOfSquares = 0;
  let squareOfSums = 0;
  for(let i = 1; i <= num; i++) {
    sumOfSquares += i**2;
    squareOfSums += i;
  }
  squareOfSums = squareOfSums**2;
  console.log(squareOfSums);
  console.log(sumOfSquares);
  console.log(squareOfSums - sumOfSquares);
}

// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
// What is the 10 001st prime number?
function problem7(num) {
  let arr = erathosSieve(1000000);
  return arr[num+1];
}

function erathosSieve(num) {
  let numArr = Array(num).fill(true);
  for(let i = 2; i < Math.sqrt(num); i++) {
    if (numArr[i]) {
      for(let j = i**2; j<num; j+=i) {
        numArr[j] = false;
      }
    }
  }
  let newArray = [];
  for(let i = 0; i < numArr.length; i++) {
    if(numArr[i]) newArray.push(i);
  }
  return newArray;
}

// The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

// 73167176531330624919225119674426574742355349194934
// 96983520312774506326239578318016984801869478851843
// 85861560789112949495459501737958331952853208805511
// 12540698747158523863050715693290963295227443043557
// 66896648950445244523161731856403098711121722383113
// 62229893423380308135336276614282806444486645238749
// 30358907296290491560440772390713810515859307960866
// 70172427121883998797908792274921901699720888093776
// 65727333001053367881220235421809751254540594752243
// 52584907711670556013604839586446706324415722155397
// 53697817977846174064955149290862569321978468622482
// 83972241375657056057490261407972968652414535100474
// 82166370484403199890008895243450658541227588666881
// 16427171479924442928230863465674813919123162824586
// 17866458359124566529476545682848912883142607690042
// 24219022671055626321111109370544217506941658960408
// 07198403850962455444362981230987879927244284909188
// 84580156166097919133875499200524063689912560717606
// 05886116467109405077541002256983155200055935729725
// 71636269561882670428252483600823257530420752963450

// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
function problem8(num) {
  let givenNum = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
  let tempArr = givenNum.split("");
  let largestProduct = 0;
  while(tempArr.length >= num){
    let tempProduct = 1;
    for(let i = 0; i < num; i++) {
      tempProduct *= parseInt(tempArr[i]);
    }
    if (tempProduct>largestProduct) {
      largestProduct = tempProduct;
    }
    tempArr.shift();
  } 
  console.log(largestProduct);
}



//A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
//a^2 + b^2 = c^2

//For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

//There exists exactly one Pythagorean triplet for which a + b + c = 1000.
//Find the product abc.
function problem9() {
  for(let a = 1; a < 1000; a++){
    for(let b = 1; b < 1000; b++){
      if (Math.pow((1000-(a+b)),2) == (Math.pow(a,2) + Math.pow(b,2))) return [a,b, (1000-(a+b))]
    }
  }
}

console.log(problem9());

